name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

defaults:
  run:
    working-directory: server

env:
  CARGO_TERM_COLOR: always

jobs:
  build-debug:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate prisma client
        run: cargo prisma generate
      - name: Build Debug
        run: cargo build

  build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate prisma client
        run: cargo prisma generate
      - name: Build Release
        run: cargo build --bin flare --release
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: flare
          path: server/target/release/flare
          retention-days: 30

  fmt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate prisma client
        run: cargo prisma generate
      - name: Install rustfmt
        run: rustup component add rustfmt
      - name: Format Check
        run: cargo fmt -- --check

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate prisma client
        run: cargo prisma generate
      - name: Lint Code
        run: cargo clippy -- -D warnings

  openapi:
    runs-on: ubuntu-latest
    needs: [build-debug]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate prisma client
        run: cargo prisma generate
      - name: Generate OpenAPI
        run: ./openapi.sh
      - name: Upload OpenAPI artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi.json
          path: server/openapi.json
          retention-days: 30

  test:
    runs-on: ubuntu-latest
    needs: [build-debug]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: flare
          POSTGRES_PASSWORD: flare
          POSTGRES_DB: flare-db-test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping | grep PONG"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate prisma client
        run: cargo prisma generate
      - name: Install llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Install nextest
        uses: taiki-e/install-action@nextest
      - name: Run Tests
        env:
          DATABASE_BASE: postgres://flare:flare@localhost:5432
        run: cargo llvm-cov nextest --all --ignore-filename-regex '(prisma)\.rs' --color always --codecov --output-path codecov.json
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: codecov.json
          fail_ci_if_error: true

  # publish:
  #   runs-on: ubuntu-latest
  #   if:
  #     github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   needs:
  #     - build-release
  #     - openapi
  #     - fmt
  #     - lint
  #     - test
  #   permissions:
  #     contents: read
  #     packages: write
  #     id-token: write
  #   env:
  #     REGISTRY: ghcr.io
  #     IMAGE_NAME: ${{ github.repository }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build and push server
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: server
  #         sbom: true
  #         provenance: mode=max
  #         push: true
  #         tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-server:latest
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: openapi.json
  #         path: frontend
  #     - name: Build and push frontend
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: frontend
  #         sbom: true
  #         provenance: mode=max
  #         push: true
  #         tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
