datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "cargo prisma"
  output   = "../flare/src/prisma.rs"
}

model ScheduledPoll {
  id             Int    @id @default(autoincrement())
  submissionLink String @unique
  Poll           Poll[]
  rrule          String
  group          Group? @relation(fields: [groupId], references: [id])
  groupId        Int?
  imageLimit     Int
  // duration + start time (16:00 UTC)
  // submission interval?
}

model Poll {
  id              Int            @id @default(autoincrement())
  shortLink       String         @unique
  name            String
  info            String
  ends            DateTime
  images          Image[]
  users           User[] // what is this for???
  votes           Vote[]
  locked          Boolean
  group           Group?         @relation(fields: [groupId], references: [id])
  groupId         Int?
  scheduledPoll   ScheduledPoll? @relation(fields: [scheduledPollId], references: [id])
  scheduledPollId Int?
  // TODO: this for basically everything?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Image {
  id           Int      @id @default(autoincrement())
  name         String
  originalName String
  aspectRatio  String
  user         User     @relation(fields: [userId], references: [id])
  poll         Poll?    @relation(fields: [pollId], references: [id])
  votes        Vote[]
  approved     Boolean
  approvedBy   User?    @relation(name: "ApprovedImageToUser", fields: [approvedById], references: [id])
  approvedById Int?
  pollId       Int?     @unique
  userId       Int
  createdAt    DateTime @default(now())
}

model Group {
  id            Int             @id @default(autoincrement())
  ScheduledPoll ScheduledPoll[]
  Poll          Poll[]

  owner  User   @relation(name: "GroupToOwner", fields: [userId], references: [id])
  userId Int
  users  User[]
}

model User {
  id             Int             @id @default(autoincrement())
  permissions    Permissions[]
  displayName    String
  discord        DiscordUser?
  credential     CredentialUser?
  polls          Poll[]
  images         Image[]
  approvedImages Image[]         @relation(name: "ApprovedImageToUser")
  groups         Group[]
  ownedGroups    Group[]         @relation(name: "GroupToOwner")
}

enum Permissions {
  CREATE_POLLS
  VOTE
  EDIT_POLLS
  DELETE_POLLS
}

model CredentialUser {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
}

model DiscordUser {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  discordId    BigInt   @unique
  createdAt    DateTime @default(now())
}

model Vote {
  id            Int            @id @default(autoincrement())
  ephemeralUser EphemeralUser?
  image         Image          @relation(fields: [imageId], references: [id])
  imageId       Int
  poll          Poll           @relation(fields: [pollId], references: [id])
  pollId        Int
}

model EphemeralUser {
  id     Int    @id @default(autoincrement())
  vote   Vote   @relation(fields: [voteId], references: [id]) // just Vote, instead of []? - I could just yeet the user after the poll ends
  voteId Int    @unique
  cookie String
  ip     String
}

// model Stat {
//    TODO?
// }
